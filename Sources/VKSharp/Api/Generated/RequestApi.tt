<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#@ include file="SharedFuncs.tt"#>
using System;
using System.Collections.Generic;
using System.Linq;
using VKSharp.Core.Entities;
using VKSharp.Core.Enums;
using VKSharp.Core.ResponseEntities;
using VKSharp.Data.Api;
using VKSharp.Data.Parameters;
using VKSharp.Data.Request;
using VKSharp.Helpers;
using VKSharp.Helpers.PrimitiveEntities;

// ReSharper disable UnusedMember.Global
// ReSharper disable UseObjectOrCollectionInitializer
namespace VKSharp {
    public partial class RequestApi {
    <#
        var ms = GetMethods(Host.ResolvePath("VKSharpFuncs.xml"));
        foreach ( var node in ms ) { #>
    public VKRequest<<#=node.Request.Type#>> <#=ToMeth(node.Name)#>(
            <#
                var l = node.Params.Length;
                for (var i =0; i<l; i++){
                    var a = node.Params[i]; #>
                    <#=a.Params?"params":""#>//params
                    <#=a.Type#>//paramter type
                    <#=ToMeth(a.Name, true)#>//parameter name
                    <#=a.Default!=null?"= "+a.Default:""#>//default value
                    <#=i<l-1?",":""#>//parameter separator
            <#}#>
){
            var req = new VKRequest<<#=node.Request.Type#>>{
                MethodName = "<#=node.Name#>",
                Parameters = new Dictionary<string, string> {
                    <#for (var i =0; i<l; i++){
                        var a = node.Params[i]; #>
                        {
                            "<#=a.Name.Replace("@","")#>",//key
                            <#=
                                a.Custom==null
                                    ?Stringify(ToMeth(a.Name, true), a.Type)
                                    :a.Custom.Replace("#name",ToMeth(a.Name,true))
                            #>//value
                        }
                        <#=i<l-1?",":""#>//element separator
            <#}#>
    }
            };
    <#if (!node.Request.NeedToken){#>
        if (IsLogged){
    <#}#>
            req.Token = CurrentToken;
            <#=!node.Request.NeedToken?"}":""#>
            return req;
        }
    <#}#>
}
}