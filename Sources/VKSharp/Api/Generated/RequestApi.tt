<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#@ include file="SharedFuncs.tt"#>
using System;
using System.Collections.Generic;
using System.Linq;
using VKSharp.Core.Entities;
using VKSharp.Core.Enums;
using VKSharp.Core.ResponseEntities;
using VKSharp.Data.Api;
using VKSharp.Data.Parameters;
using VKSharp.Data.Request;
using VKSharp.Helpers;
using VKSharp.Helpers.PrimitiveEntities;

// ReSharper disable UnusedMember.Global
// ReSharper disable UseObjectOrCollectionInitializer
namespace VKSharp {
	public partial class RequestApi {
	<#
		string inputFile = Host.ResolvePath("VKSharpFuncs.xml");
		var d = XDocument.Load( inputFile );
		var n = d.Root;
		foreach ( var node in n.Elements() ) {
			var rn = node.Element( "request" );
			var retn = node.Element( "return" );
			var parse = bool.Parse(retn.Attribute("parse").Value);
			var multiple = bool.Parse(retn.Attribute("multiple").Value);
			var type = rn.Attribute("type").Value;
			var needToken = bool.Parse(rn.Attribute( "need_token" ).Value);
			var mname = node.Attribute("name").Value;
	#>
	public <#=("VKRequest<"+type+">")#> <#=ToMeth(mname)#>(
			<#
				var pn = node.Element("params")??new XElement("params");
				var els = pn.Elements().ToArray();
				var pms = els.Select(pnode=>new{
					ptype = pnode.Attribute("type").Value,
					pname= pnode.Attribute("name").Value,
					pda = pnode.Attribute("default"),
					pdefault = pnode.Attribute("default")!=null,
					pms = pnode.Attribute("params")!=null,
					custom = pnode.Attribute("custom")!=null?pnode.Attribute("custom").Value:null
				}).ToArray();
				var l = els.Length;
				for (var i =0; i<l; i++){ var a = pms[i]; #>
<#=a.pms?"params":""#> <#=a.ptype#> <#=ToMeth(a.pname, true)#> <#=a.pdefault?"= "+a.pda.Value:""#><#=i<l-1?",":""#>
			<#}#>
){
			var req = new VKRequest<<#=type#>>{
				MethodName = "<#=mname#>",
				Parameters = new Dictionary<string, string> {
					<#for (var i =0; i<l; i++){ var a = pms[i]; #>
{ "<#=a.pname.Replace("@","")#>", <#=a.custom==null?Stringify(ToMeth(a.pname, true), a.ptype):a.custom.Replace("#name",ToMeth(a.pname,true))#> }<#=i<l-1?",":""#>
			<#}#>
	}
			};
	<#if (!needToken){#>
		if (IsLogged){
	<#}#>
			req.Token = CurrentToken;
			<#=!needToken?"}":""#>
			return req;
		}
	<#}#>
}
}