<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
public static string ToMeth(string name,bool p=false)
{
    var t = new StringBuilder();
    t.Append(p?Char.ToLower(name[0]):Char.ToUpper(name[0]));
    for (var index = 1; index < name.Length; index++)
    {
        var c = name[index];
        //add '_' before numbers and captials 
        if (c=='.'||c=='_') t.Append(Char.ToUpper(name[++index]));
        else t.Append(c);
    }
    return t.ToString();
}
public static string Stringify(string name, string type){
	if (type=="string")
		return name;
	if (type=="bool")
		return "("+name+"?1:0).ToNCString()";
	if (type=="bool?")
		return name=" != null ? ( "+name+".Value ? 1 : 0 ).ToNCString() : \"\"";
	var nums = "int,uint,byte,sbyte,short,ushort,long,ulong,double".Split(',');
	if (nums.Any(a=>a==type))
		return name+".ToNCString()";
	if (nums.Any(a=>type==a+"?"))
		return "MiscTools.NullableString("+name+")";
	if (nums.Any(a=>type==a+"[]"))
		return "("+name+"??new "+type+"{}).ToNCStringA()";
	if (type=="string[]")
		return "String.Join(\",\","+name+")";
	if (Regex.IsMatch(type, @"Tuple<\w+\,[ ]*\w+>\[\]"))
		return "String.Join(\",\","+ name+".Select(a=>a.Item1 +\"_\" +a.Item2))";
	if (type=="UserFields")
		return "String.Join( \",\", MiscTools.GetUserFields( "+name+" ) )";
    if (type=="GroupFields")
        return "String.Join( \",\", MiscTools.GetGroupFields( "+name+" ) )";
	return "";
}
#>