<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Serialization" #>
<#+
[Serializable]
public class Method {
    [XmlAttributeAttribute]
	public string Name {get;set;}
	public Request Request {get;set;}
	public Return Return {get;set;}
	public Param[] Params {get;set;}
}
[Serializable]
public class Request {
    [XmlAttributeAttribute]
	public string Type {get;set;}
    [XmlAttributeAttribute]
	public bool NeedToken {get;set;}
}
[Serializable]
public class Return {
    [XmlAttributeAttribute]
	public bool Parse {get;set;}
    [XmlAttributeAttribute]
	public bool Multiple {get;set;}
}
[Serializable]
public class Param {
    [XmlAttributeAttribute]
	public string Name {get;set;}
    [XmlAttributeAttribute]
	public string Type {get;set;}
    [XmlAttributeAttribute]
	public string Default {get;set;}
    [XmlAttributeAttribute]
	public string Custom {get;set;}
    [XmlAttributeAttribute]
	public bool Params {get;set;}
}
public static string GetParamsString(Method node){
    return String.Join(
		",",
		node.Params.Select(a=>
			String.Format(
				"{0} {1} {2} {3}",
				a.Params?"params":"",
				a.Type,
				ToMeth(a.Name, true),
				a.Default!=null?"= "+a.Default:""
			)
		)
	);
}
public static Method[] GetMethods(string file){
    file = file;
    using (var f = File.OpenRead(file))
        return (Method[])new XmlSerializer(typeof(Method[])).Deserialize(f);
}
public static string ToMeth(string name,bool p=false)
{
    var t = new StringBuilder();
    t.Append(p?Char.ToLower(name[0]):Char.ToUpper(name[0]));
    for (var index = 1; index < name.Length; index++)
    {
        var c = name[index];
        //add '_' before numbers and capitals 
        if (c=='.'||c=='_') t.Append(Char.ToUpper(name[++index]));
        else t.Append(c);
    }
    return t.ToString();
}
public static string Stringify(string name, string type){
	//todo: typing
	//common types
	switch ( type ) {
		case "string":
	        return name;
		case "bool":
			return "("+name+"?1:0).ToNCString()";
		case "bool?":
			return string.Format( "({0} != null ? ( {0}.Value ? 1 : 0 ).ToNCString() : \"\")", name );
	    case "string[]":
	        return "String.Join(\",\","+name+")";
		case "UserFields":
			return "String.Join( \",\", MiscTools.GetUserFields( "+name+" ) )";
		case "GroupFields":
			return "String.Join( \",\", MiscTools.GetGroupFields( "+name+" ) )";
		case "AudioGenre":
			return "((int)" + name + ").ToString()";
		case "AudioGenre?":
			return string.Format( "({0}!=null?((int)({0})).ToString():String.Empty)", name );
	}

	//numbers, numbers?, numbers[]
	var nums = "int,uint,byte,sbyte,short,ushort,long,ulong,double".Split(',');
	if (nums.Any(a=>a==type)) return name+".ToNCString()";	
	if (nums.Any(a=>type==a+"?")) return "MiscTools.NullableString("+name+")";
	if (nums.Any(a=>type==a+"[]")) return string.Format( "({0}??new {1}{{}}).ToNCStringA()", name, type );
	if (Regex.IsMatch(type, @"Tuple<\w+\,[ ]*\w+>\[\]"))
		return "String.Join(\",\","+ name+".Select(a=>a.Item1 +\"_\" +a.Item2))";

	//default
	return name+".ToString()";
}
#>